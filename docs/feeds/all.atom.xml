<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Python Monthly</title><link href="/" rel="alternate"></link><link href="/feeds/all.atom.xml" rel="self"></link><id>/</id><updated>2017-03-02T22:00:00-08:00</updated><entry><title>Python Monthly Mar 2017 - Getting Your Python Project Open Source Ready</title><link href="/python-monthly-mar-2017-getting-your-python-project-open-source-ready.html" rel="alternate"></link><published>2017-03-02T22:00:00-08:00</published><updated>2017-03-02T22:00:00-08:00</updated><author><name>Python Monthly</name></author><id>tag:None,2017-03-02:/python-monthly-mar-2017-getting-your-python-project-open-source-ready.html</id><summary type="html">&lt;p&gt;This month we discuss licensing, documentation, and testing. Jay has been working on something that he would love to share with the world. He is working with Kenneth to get it open source ready.&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/bmjNoUnT4ZI" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;</summary><content type="html">&lt;p&gt;This month we discuss licensing, documentation, and testing. Jay has been working on something that he would love to share with the world. He is working with Kenneth to get it open source ready.&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/bmjNoUnT4ZI" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;</content><category term="videos"></category></entry><entry><title>Python Monthly Jan 2017 - Open Source Contributing ft. Russell Keith-Magee</title><link href="/python-monthly-jan-2017-open-source-contributing-ft-russell-keith-magee.html" rel="alternate"></link><published>2017-01-05T22:00:00-08:00</published><updated>2017-01-05T22:00:00-08:00</updated><author><name>Python Monthly</name></author><id>tag:None,2017-01-05:/python-monthly-jan-2017-open-source-contributing-ft-russell-keith-magee.html</id><summary type="html">&lt;p&gt;This month we are learning from &lt;a href="http://pybee.org/"&gt;PyBeeWare&lt;/a&gt; creator. &lt;a href="https://twitter.com/freakboy3742"&gt;Russell Keith-Magee&lt;/a&gt;&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/_-_qwJe498c" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;a href="http://pybee.org"&gt;PyBeeWare&lt;/a&gt;
&lt;a href="https://github.com/pybee"&gt;Contribute to BeeWare Code&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;This month we are learning from &lt;a href="http://pybee.org/"&gt;PyBeeWare&lt;/a&gt; creator. &lt;a href="https://twitter.com/freakboy3742"&gt;Russell Keith-Magee&lt;/a&gt;&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/_-_qwJe498c" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;a href="http://pybee.org"&gt;PyBeeWare&lt;/a&gt;
&lt;a href="https://github.com/pybee"&gt;Contribute to BeeWare Code&lt;/a&gt;&lt;/p&gt;</content><category term="videos"></category></entry><entry><title>TinyDB the NoSQL alternative to SQLlite</title><link href="/tinydb-intro.html" rel="alternate"></link><published>2016-12-22T08:30:00-08:00</published><updated>2016-12-22T08:30:00-08:00</updated><author><name>TJ Nel</name></author><id>tag:None,2016-12-22:/tinydb-intro.html</id><summary type="html">&lt;p&gt;A Introduction to Tinydb the NoSQL alternative to SQLite for a Self-contained, File Based, Document Oriented database, thats really small!&lt;/p&gt;</summary><content type="html">&lt;h3&gt;A introduction to Tinydb the NoSQL alternative to SQLite for a self contained, serverless database.&lt;/h3&gt;
&lt;p&gt;Let face it the future of the internet revolves around APIs, we are in a data-driven world and the format that we move this data is JSON. So it would be logical to have a database that speaks JSON and NoSQL database often provide a JSON like syntax that work well with this data.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;enter TinyDB...&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://tinydb.readthedocs.io"&gt;TinyDB&lt;/a&gt; is a Document oriented NoSQL database that was written with only about 1200 lines of code! Just like with SQLite, TinyDB is great for quick and small scoped projects and testing. The database is stored in a .json file which as you guessed it is a simple json file that you can query later.Best of all it is written in good 'ole Python.&lt;/p&gt;
&lt;h4&gt;Example: Storing API Responses with TinyDB&lt;/h4&gt;
&lt;p&gt;In this example I am going to show you how to store a json formatted API response to a TinyDB databate. From there you can add, remove and modify entries within the database. &lt;/p&gt;
&lt;h4&gt;Installing TinyDB&lt;/h4&gt;
&lt;p&gt;You can install TinyDB using PIP.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;tinydb&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Using TinyDB&lt;/h4&gt;
&lt;p&gt;Just like with any other python module you can import TinyDB but it is best practice to import the submodules TinyDB and Query (see below).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;tinydb&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;TinyDB&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Query&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then you will need to create a database object&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TinyDB&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;dbname.json&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;After that you are all set, just work directly with the database object you just created.&lt;/p&gt;
&lt;h4&gt;Setting up your API Call&lt;/h4&gt;
&lt;p&gt;For this example we will be using the People In Space API available from &lt;a href="http://open-notify.org/Open-Notify-API/People-In-Space/"&gt;Open Notify&lt;/a&gt;. This API return a list of all of the members currently on the International Space Station. To use this API you need to sent a HTTP request to &lt;strong&gt;http://api.open-notify.org/astros.json&lt;/strong&gt; with no authentication or parameters required and you will get back a JSON formatted response with all of the current astronauts on the ISS. So in python the request to get the JSON back looks like this...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;
&lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;http://api.open-notify.org/astros.json&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So if we print data we should get the following output:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;{'number': 6, 'people': [{'craft': 'ISS', 'name': 'Sergey Rizhikov'}, {'craft': &amp;gt;'ISS', 'name': 'Andrey Borisenko'}, {'craft': 'ISS', 'name': 'Shane Kimbrough'}, {'craft': 'ISS', 'name': 'Oleg Novitskiy'}, {'craft': 'ISS', 'name': 'Thomas Pesquet'}, {'craft': 'ISS', 'name': 'Peggy Whitson'}], 'message': 'success'}&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;Adding API Call Results to TinyDB&lt;/h4&gt;
&lt;p&gt;Now we want to put the people from that JSON response into a TinyDB database. So to do  this we need to learn how to add a entry into a TinyDB database. TinyDB has a couple of functions that allow you to modify the database file you are working with. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Inserting Data&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;To insert or add data into your database you would use &lt;code&gt;db.insert(...)&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Updating Data&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;To update information in your database you would use &lt;code&gt;db.update(fields, query)&lt;/code&gt; this works by updating all elements matching the query with fields.&lt;/p&gt;
&lt;p&gt;Right now we want to add every entry from the list of people in space so we will be using insert. So if we wanted to add the Sergey Rizhikov from the data above we would use the syntax &lt;code&gt;db.insert({'craft': 'ISS', 'name': 'Sergey Rizhikov'})&lt;/code&gt;.  But we dont want to copy-paste every person in space, so iterating through the people section of the JSON output and putting that into the &lt;code&gt;db.insert()&lt;/code&gt; statement using the below code should populate our database.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;person&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;people&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
    &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and using &lt;code&gt;db.all()&lt;/code&gt; which prints out the contents of your tiny database confirms the people were inserted into the database.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p Whitson_="Whitson'" _ISS_="'ISS'," _Peggy="'Peggy" _craft_:="'craft':" _name_:="'name':"&gt;{'craft': 'ISS', 'name': 'Sergey Rizhikov'}
{'craft': 'ISS', 'name': 'Andrey Borisenko'}
{'craft': 'ISS', 'name': 'Shane Kimbrough'}
{'craft': 'ISS', 'name': 'Oleg Novitskiy'}
{'craft': 'ISS', 'name': 'Thomas Pesquet'}&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;Querying the Database&lt;/h4&gt;
&lt;p&gt;Now that we have data in our database, it would be useful to be able to retieve from it. TinyDB allows you to query that data by using a Query() object. So if you wanted to get a list of all the people in space on the ISS you can use this code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Astro&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Query&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Astro&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;craft&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ISS&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Unsuprisingly you will get all of the entries put in with ISS as the craft (which is all of them). But what if you wanted to search for a speciifc person like Peggy? Well you could you use this code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Astro&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Peggy&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Which will return only people with Peggy in their name&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[{'craft': 'ISS', 'name': 'Peggy Whitson'}]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Modifying the code to search for anyone with &lt;code&gt;'Pe'&lt;/code&gt; in their name with this syntax &lt;code&gt;db.search(Astro.name.search('Pe'))&lt;/code&gt; returns the following:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[{'craft': 'ISS', 'name': 'Thomas Pesquet'},
 {'craft': 'ISS', 'name': 'Peggy Whitson'}]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;Updating the fields in the Database&lt;/h4&gt;
&lt;p&gt;Now what if one of the people in space changes the craft they are on from the ISS to Tiangong 1 (We will call it T1) we can update their data by following the syntax we previously talked about. So lets send Peggy Whitson to T1.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;craft&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;T1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;Astro&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Peggy&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now checking &lt;code&gt;db.all()&lt;/code&gt; you should now see Peggy on the T1 craft.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[{'craft': 'ISS', 'name': 'Sergey Rizhikov'},
 {'craft': 'ISS', 'name': 'Andrey Borisenko'},
 {'craft': 'ISS', 'name': 'Shane Kimbrough'},
 {'craft': 'ISS', 'name': 'Oleg Novitskiy'},
 {'craft': 'ISS', 'name': 'Thomas Pesquet'},
 {'craft': 'T1', 'name': 'Peggy Whitson'}]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;Removing Data from the Database&lt;/h4&gt;
&lt;p&gt;Lets now send someone home, TinyDB allows you to remove entries in the database using &lt;code&gt;db.remove()&lt;/code&gt; where it will remove all of the entries matching the query placed inside of the parenthesis. Lets send Shane home and remove him from the database with the following code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Astro&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Shane&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now checking &lt;code&gt;db.all()&lt;/code&gt; we see that Shane is no longer in the database output.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[{'craft': 'ISS', 'name': 'Sergey Rizhikov'},
 {'craft': 'ISS', 'name': 'Andrey Borisenko'},
 {'craft': 'ISS', 'name': 'Oleg Novitskiy'},
 {'craft': 'ISS', 'name': 'Thomas Pesquet'},
 {'craft': 'T1', 'name': 'Peggy Whitson'}]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;Clearing the database&lt;/h4&gt;
&lt;p&gt;Last but not least if you want to clear out the database you can just run &lt;code&gt;db.purge()&lt;/code&gt; and you will have a nice and empty database to work with. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;For more TinyDB info:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://tinydb.readthedocs.io"&gt;https://tinydb.readthedocs.io&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/msiemens/tinydb"&gt;https://github.com/msiemens/tinydb&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://pypi.python.org/pypi/tinydb"&gt;https://pypi.python.org/pypi/tinydb&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="Databases"></category><category term="NoSQL"></category></entry><entry><title>Bots and More (Bots) - Python Monthly December 2016</title><link href="/bots-and-more-bots-python-monthly-december-2016.html" rel="alternate"></link><published>2016-12-01T21:00:00-08:00</published><updated>2017-01-07T00:00:00-08:00</updated><author><name>Python Monthly</name></author><id>tag:None,2016-12-01:/bots-and-more-bots-python-monthly-december-2016.html</id><summary type="html">&lt;p&gt;Streamed live on Dec 1, 2016
This month we continue our investigation on Bots!&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/b39qlOdZt0w" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;This month's &lt;a href="https://docs.google.com/presentation/d/1ma-80yC4OckawLREvPzH3ccXcL78oLPolZOZOWffTA8/edit?usp=sharing"&gt;slides&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;Streamed live on Dec 1, 2016
This month we continue our investigation on Bots!&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/b39qlOdZt0w" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;This month's &lt;a href="https://docs.google.com/presentation/d/1ma-80yC4OckawLREvPzH3ccXcL78oLPolZOZOWffTA8/edit?usp=sharing"&gt;slides&lt;/a&gt;&lt;/p&gt;</content><category term="videos"></category></entry><entry><title>GOING LIVE!! Learning about Git and Building Bots! - November 2016 - Python Monthly</title><link href="/going-live-learning-about-git-and-building-bots-november-2016-python-monthly.html" rel="alternate"></link><published>2016-11-03T21:00:00-07:00</published><updated>2017-01-07T00:00:00-08:00</updated><author><name>Python Monthly</name></author><id>tag:None,2016-11-03:/going-live-learning-about-git-and-building-bots-november-2016-python-monthly.html</id><summary type="html">&lt;p&gt;Streamed live on Nov 3, 2016
This month we are learning about Git and Building some bots!&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/YmyqHt3t6UY" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;We take a look at how last month's project (The Python Monthly Website) came along.&lt;/p&gt;
&lt;p&gt;CHECK OUT OUR NEW WEBSITE! - &lt;a href="http://pythonmonthly.com"&gt;http://pythonmonthly.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Want to Contribute - &lt;a href="https://github.com/python-monthly"&gt;https://github.com/python-monthly&lt;/a&gt;
Join our slack …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Streamed live on Nov 3, 2016
This month we are learning about Git and Building some bots!&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/YmyqHt3t6UY" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;We take a look at how last month's project (The Python Monthly Website) came along.&lt;/p&gt;
&lt;p&gt;CHECK OUT OUR NEW WEBSITE! - &lt;a href="http://pythonmonthly.com"&gt;http://pythonmonthly.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Want to Contribute - &lt;a href="https://github.com/python-monthly"&gt;https://github.com/python-monthly&lt;/a&gt;
Join our slack team - &lt;a href="bit.ly/pm-slack-invite"&gt;bit.ly/pm-slack-invite&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://docs.google.com/presentation/d/10wKUC9p91cXH6JBBROEBFhShASVDGPLAoUb0JFnoFPI/edit?usp=sharing"&gt;View Slides&lt;/a&gt;&lt;/p&gt;</content><category term="videos"></category></entry><entry><title>How To Get Pelican Up And Running</title><link href="/how-to-get-pelican-up-and-running.html" rel="alternate"></link><published>2016-10-22T22:16:00-07:00</published><updated>2016-10-22T22:16:00-07:00</updated><author><name>Steve Gregg</name></author><id>tag:None,2016-10-22:/how-to-get-pelican-up-and-running.html</id><summary type="html">&lt;p&gt;We will assume that you already have Python, pip and Git installed and running on your particular OS, if not please do so before completing any of the instructions below.&lt;/p&gt;
&lt;p&gt;To get Pelican up and running, you will first need to clone our repository&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ git clone https://github.com/Python-Monthly …&lt;/code&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;We will assume that you already have Python, pip and Git installed and running on your particular OS, if not please do so before completing any of the instructions below.&lt;/p&gt;
&lt;p&gt;To get Pelican up and running, you will first need to clone our repository&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ git clone https://github.com/Python-Monthly/Python-Monthly-Website.git&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Go into the project folder&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ cd pythonmonthly.github.io&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The next step is to create a virtual environment within which to run Pelican. This is optional but highly recommended. If you do not have 'virtualenv' installed, do so by typing the following&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ pip install virtualenv&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Once installed, run&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ virtualenv venv&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Activate the newly created virtual environment&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ source venv/bin/activate&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Now we can install all the required components for the project&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ pip install -r requirements.txt&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;You now have everything you need to test and contribute to our site. &lt;/p&gt;
&lt;p&gt;We communicate using Slack, you can&lt;/p&gt;
&lt;p&gt;&lt;a class="typeform-share button" href="https://jay400.typeform.com/to/tfYA6n" data-mode="1" target="_blank"&gt;Request an invite&lt;/a&gt;
&lt;script&gt;(function(){var qs,js,q,s,d=document,gi=d.getElementById,ce=d.createElement,gt=d.getElementsByTagName,id='typef_orm',b='https://s3-eu-west-1.amazonaws.com/share.typeform.com/';if(!gi.call(d,id)){js=ce.call(d,'script');js.id=id;js.src=b+'share.js';q=gt.call(d,'script')[0];q.parentNode.insertBefore(js,q)}id=id+'_';if(!gi.call(d,id)){qs=ce.call(d,'link');qs.rel='stylesheet';qs.id=id;qs.href=b+'share-button.css';s=gt.call(d,'head')[0];s.appendChild(qs,s)}})()&lt;/script&gt;&lt;br&gt;&lt;/p&gt;</content><category term="blog"></category></entry><entry><title>How to Create a Blog Post</title><link href="/how-to-create-a-blog-post.html" rel="alternate"></link><published>2016-10-16T10:28:00-07:00</published><updated>2016-10-16T10:28:00-07:00</updated><author><name>Steve Gregg</name></author><id>tag:None,2016-10-16:/how-to-create-a-blog-post.html</id><summary type="html">&lt;p&gt;There are two ways to create a new blog post here at Python Monthly. The first and easiest way is to use our Python Script, 'new_post.py'. This method does require that you have Python 3 installed and have downloaded or cloned the 'Python-Monthly-Website' repository. First navigate to the root …&lt;/p&gt;</summary><content type="html">&lt;p&gt;There are two ways to create a new blog post here at Python Monthly. The first and easiest way is to use our Python Script, 'new_post.py'. This method does require that you have Python 3 installed and have downloaded or cloned the 'Python-Monthly-Website' repository. First navigate to the root of the 'Python-Monthly-Website' folder from the command line, call the script and pass your blog post title as an argument as shown below&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ python new_post.py "My new blog post title"&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This generates a file in the 'content' folder with the date and blog post title (2016_10_16_my-new-blog-post-title.md). Open the file in your favorite text editor. The file should contain the following&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Title&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;My&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;blog&lt;/span&gt; &lt;span class="n"&gt;post&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;
&lt;span class="n"&gt;Date&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2016&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;28&lt;/span&gt;
&lt;span class="n"&gt;Author&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; 
&lt;span class="n"&gt;Category&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; 
&lt;span class="n"&gt;Tags&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Add your name to the 'author' field and also fill in the 'Category' and 'Tags' fields. Below these headers, you may begin the body of your post.&lt;/p&gt;
&lt;p&gt;The second way to create a blog post is to manually do what the Python script does, ie launch your favorite text editor and paste the following text&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Title&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;My&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;blog&lt;/span&gt; &lt;span class="n"&gt;post&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;
&lt;span class="n"&gt;Date&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2016&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;28&lt;/span&gt;
&lt;span class="n"&gt;Author&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; 
&lt;span class="n"&gt;Category&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; 
&lt;span class="n"&gt;Tags&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Just as the first method above, add your name to the 'author' field and also fill in the 'Category' and 'Tags' fields. You may then begin the body of your post below the headers.&lt;/p&gt;
&lt;h3&gt;Things to note:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;The time in the 'Date' field is optional&lt;/li&gt;
&lt;li&gt;The 'Category' field is used to categorize posts by topic. If you are unsure of a category, you can use the 'General' category&lt;/li&gt;
&lt;li&gt;The 'Tags' field is also optional and is used to tag your post with keywords.&lt;/li&gt;
&lt;/ul&gt;</content><category term="blog"></category></entry><entry><title>Python Monthly October 2016</title><link href="/python-monthly-october-2016.html" rel="alternate"></link><published>2016-10-06T21:00:00-07:00</published><updated>2017-01-07T00:00:00-08:00</updated><author><name>Python Monthly</name></author><id>tag:None,2016-10-06:/python-monthly-october-2016.html</id><summary type="html">&lt;p&gt;Streamed live on Oct 6, 2016
Our first monthly Python Monthly meeting&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/7gUS19f3CUQ" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;Welcome to the first session of the Python Monthly (formerly python thursday!) This week we talk about what is Python Monthly, how to get involved and lastly OUR FIRST PROJECT!&lt;/p&gt;</summary><content type="html">&lt;p&gt;Streamed live on Oct 6, 2016
Our first monthly Python Monthly meeting&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/7gUS19f3CUQ" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;Welcome to the first session of the Python Monthly (formerly python thursday!) This week we talk about what is Python Monthly, how to get involved and lastly OUR FIRST PROJECT!&lt;/p&gt;</content><category term="videos"></category></entry></feed>